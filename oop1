//encaptulation
#include <iostream>
using namespace std;

// declaring class
class Circle {
	// access modifier
private:
	// Data Member
	float area;
	float radius;

public:
	void getRadius()
	{
		cout << "Enter radius\n";
		cin >> radius;
	}
	void findArea()
	{
		area = 3.14 * radius * radius;
		cout << "Area of circle=" << area;
	}
};
int main()
{
	// creating instance(object) of class
	Circle cir;
	cir.getRadius(); // calling function
	cir.findArea(); // calling function
}



// C++ Program to Demonstrate the
// working of Abstraction
#include <iostream>
using namespace std;
 
class implementAbstraction {
private:
    int a, b;
 
public:
    // method to set values of
    // private members
    void set(int x, int y)
    {
        a = x;
        b = y;
    }
 
    void display()
    {
        cout << "a = " << a << endl;
        cout << "b = " << b << endl;
    }
};
 
int main()
{
    implementAbstraction obj;
    obj.set(10, 20);
    obj.display();
    return 0;
}



// function overloading or
// Compile-time Polymorphism
#include <bits/stdc++.h>
 
using namespace std;
class Geeks {
public:
    // Function with 1 int parameter
    void func(int x)
    {
        cout << "value of x is " << x << endl;
    }
 
    // Function with same name but
    // 1 double parameter
    void func(double x)
    {
        cout << "value of x is " << x << endl;
    }
 
    // Function with same name and
    // 2 int parameters
    void func(int x, int y)
    {
        cout << "value of x and y is " << x << ", " << y
             << endl;
    }
};
 
// Driver code
int main()
{
    Geeks obj1;
 
    // Function being called depends
    // on the parameters passed
    // func() is called with int value
    obj1.func(7);
 
    // func() is called with double value
    obj1.func(9.132);
 
    // func() is called with 2 int values
    obj1.func(85, 64);
    return 0;
}

// Operator Overloading or
// Compile-Time Polymorphism
#include <iostream>
using namespace std;
 
class Complex {
private:
    int real, imag;
 
public:
    Complex(int r = 0, int i = 0)
    {
        real = r;
        imag = i;
    }
 
    // This is automatically called
    // when '+' is used with between
    // two Complex objects
    Complex operator+(Complex const& obj)
    {
        Complex res;
        res.real = real + obj.real;
        res.imag = imag + obj.imag;
        return res;
    }
    void print() { cout << real << " + i" << imag << endl; }
};
 
// Driver code
int main()
{
    Complex c1(10, 5), c2(2, 4);
 
    // An example call to "operator+"
    Complex c3 = c1 + c2;
    c3.print();
}


// C++ program for function overriding with data members
#include <bits/stdc++.h>
using namespace std;
 
//  base class declaration.
class Animal {
public:
    string color = "Black";
};
 
// inheriting Animal class.
class Dog : public Animal {
public:
    string color = "Grey";
};
 
// Driver code
int main(void)
{
    Animal d = Dog(); // accessing the field by reference
                      // variable which refers to derived
    cout << d.color;
}


// the Virtual Function
#include <iostream>
using namespace std;
 
// Declaring a Base class
class GFG_Base {
 
public:
    // virtual function
    virtual void display()
    {
        cout << "Called virtual Base Class function"
             << "\n\n";
    }
 
    void print()
    {
        cout << "Called GFG_Base print function"
             << "\n\n";
    }
};
 
// Declaring a Child Class
class GFG_Child : public GFG_Base {
 
public:
    void display()
    {
        cout << "Called GFG_Child Display Function"
             << "\n\n";
    }
 
    void print()
    {
        cout << "Called GFG_Child print Function"
             << "\n\n";
    }
};
 
// Driver code
int main()
{
    // Create a reference of class GFG_Base
    GFG_Base* base;
 
    GFG_Child child;
 
    base = &child;
 
    // This will call the virtual function
    base->GFG_Base::display();
 
    // this will call the non-virtual function
    base->print();
}


//single inheritance
// Example:

#include<iostream>
using namespace std;

class A
{
	protected:
	int a;

	public:
		void set_A(int x)
		{
			a=x;		 
		}

		void disp_A()
		{
			cout<<endl<<"Value of A="<<a;
		}
};

class B: public A
{
	int b,p;
	
	public:
		void set_B(int x,int y)
		{
			set_A(x);
			b=y;
		}
		
		void disp_B()
		{
			disp_A();
			cout<<endl<<"Value of B="<<b;
		}
		
		void cal_product()
		{
			p=a*b;
			cout<<endl<<"Product of "<<a<<" * "<<b<<" = "<<p;
		}
		
};

main()
{
	B _b;
	_b.set_B(4,5);
	_b.cal_product();
	
	return 0;
}


//Multiple Inheritance

// Example:

#include<iostream>
using namespace std;

class A
{
			protected:
			int a;

			public:
				void set_A()
				{
						cout<<"Enter the Value of A=";
						cin>>a;
		
				}

				void disp_A()
				{
						cout<<endl<<"Value of A="<<a;
				}
};

class B: public A
{
		protected:
				int b;
			
		public:
				void set_B()
				{
					cout<<"Enter the Value of B=";
					cin>>b;
				}

		
				void disp_B()
				{
					cout<<endl<<"Value of B="<<b;
				}
};

class C: public B
{
	int c,p;
	
	public:
		void set_C()
		{
				cout<<"Enter the Value of C=";
				cin>>c;
		}
		
		void disp_C()
		{
				cout<<endl<<"Value of C="<<c;
		}
	
			void cal_product()
			{
				p=a*b*c;
				cout<<endl<<"Product of "<<a<<" * "<<b<<" * "<<c<<" = "<<p;
			}
};

main()
{
	
	C _c;
	_c.set_A();
	_c.set_B();
	_c.set_C();
	_c.disp_A();
	_c.disp_B();
	_c.disp_C();
	_c.cal_product();
	
	return 0;
	
}
///multilevel inheritance
// C++ program to implement
// Multilevel Inheritance
#include <iostream>
using namespace std;

// base class
class Vehicle {
public:
	Vehicle() { cout << "This is a Vehicle\n"; }
};

// first sub_class derived from class vehicle
class fourWheeler : public Vehicle {
public:
	fourWheeler()
	{
		cout << "Objects with 4 wheels are vehicles\n";
	}
};
// sub class derived from the derived base class fourWheeler
class Car : public fourWheeler {
public:
	Car() { cout << "Car has 4 Wheels\n"; }
};

// main function
int main()
{
	// Creating object of sub class will
	// invoke the constructor of base classes.
	Car obj;
	return 0;
}


///Dynamic Binding
In dynamic binding, the code to be executed in response to the 
function call is decided at runtime. C++ has virtual functions to 
support this. Because dynamic binding is flexible, it avoids the 
drawbacks of static binding, which connected the function call and 
definition at build time.

// C++ Program to Demonstrate the Concept of Dynamic binding
// with the help of virtual function
#include <iostream>
using namespace std;

class GFG {
public:
	void call_Function() // function that call print
	{
		print();
	}
	void print() // the display function
	{
		cout << "Printing the Base class Content" << endl;
	}
};
class GFG2 : public GFG // GFG2 inherit a publicly
{
public:
	void print() // GFG2's display
	{
		cout << "Printing the Derived class Content"
			<< endl;
	}
};
int main()
{
	GFG geeksforgeeks; // Creating GFG's object
	geeksforgeeks.call_Function(); // Calling call_Function
	GFG2 geeksforgeeks2; // creating GFG2 object
	geeksforgeeks2.call_Function(); // calling call_Function
									// for GFG2 object
	return 0;
}


